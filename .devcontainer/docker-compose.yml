# docker-compose.yml

services:
  # 1. This is your main application/development container service
  app:
    # We will build the dev container image using the instructions in devcontainer.json
    # The context '.' refers to the current directory
    build:
      context: .
      dockerfile: Dockerfile

    # This command keeps the container running, so the dev environment doesn't exit
    command: sleep infinity

    # Mount your project code into the container
    volumes:
      - ..:/workspaces:cached

    # Depend on the 'db' service. This ensures 'db' starts before 'app'
    depends_on:
      - db

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # 2. This is your PostgreSQL database service
  db:
    # Use an official PostgreSQL image
    image: postgres:16

    # Configure Docker's built-in health check with comprehensive stages
    healthcheck:
      test: [
          "CMD-SHELL",
          "if [ -z \"$$POSTGRES_USER\" ] || [ -z \"$$POSTGRES_PASSWORD\" ] || [ -z \"$$POSTGRES_DB\" ]; then \
          echo 'Environment validation failed'; exit 1; \
          elif ! pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB; then \
          echo 'Basic connectivity check failed'; exit 1; \
          elif ! psql -U $$POSTGRES_USER -d $$POSTGRES_DB -c '\\l' >/dev/null 2>&1; then \
          echo 'Authentication verification failed'; exit 1; \
          else echo 'All health checks passed'; \
          fi",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    # Restart the container automatically if it stops
    restart: unless-stopped

    # Mount a volume to persist database data.
    # This is crucial so your data isn't lost when you stop/restart the container.
    volumes:
      - postgres-data:/var/lib/postgresql/data

    # Expose the PostgreSQL port to the host machine (optional, but good for debugging)
    ports:
      - "5432:5432"

    # Set environment variables for the database from a .env file
    # This will automatically create the user and database on first run.
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

# Define the named volume for data persistence
volumes:
  postgres-data:
